// <auto-generated />
using System;
using BiologicalSamplesTraceability.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BiologicalSamplesTraceability.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250407030953_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.BatchIdentifier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Print")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SampleBatchId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SampleBatchId")
                        .IsUnique();

                    b.ToTable("BatchIdentifiers");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Checkpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<long?>("RoutineId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RoutineId");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly?>("Est_arrive")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RouteTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RouteTypeId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.RouteGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<long>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<long>("SampleBatchId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("SampleBatchId");

                    b.ToTable("RouteGroups");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.RouteType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("RouteTypes");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Routine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Routines");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.SampleBatch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClientType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConditioningType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RouteGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("SampleIdentifierId")
                        .HasColumnType("bigint");

                    b.Property<long>("SampleTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TraySize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("SampleTypeId");

                    b.ToTable("SampleBatches");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.SampleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SampleTypes");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Traceability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BatchIdentifierId")
                        .HasColumnType("bigint");

                    b.Property<long>("CheckpointId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("BatchIdentifierId");

                    b.HasIndex("CheckpointId");

                    b.ToTable("Traceabilities");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.BatchIdentifier", b =>
                {
                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.SampleBatch", "SampleBatch")
                        .WithOne("BatchIdentifier")
                        .HasForeignKey("BiologicalSamplesTraceability.Core.Entities.BatchIdentifier", "SampleBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleBatch");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Checkpoint", b =>
                {
                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.Routine", "Routine")
                        .WithMany()
                        .HasForeignKey("RoutineId");

                    b.Navigation("Routine");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Route", b =>
                {
                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.RouteType", "RouteType")
                        .WithMany("Routes")
                        .HasForeignKey("RouteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteType");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.RouteGroup", b =>
                {
                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.Route", "Route")
                        .WithMany("RouteGroups")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.SampleBatch", "SampleBatch")
                        .WithMany("RouteGroups")
                        .HasForeignKey("SampleBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("SampleBatch");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.SampleBatch", b =>
                {
                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.SampleType", "SampleType")
                        .WithMany("SampleBatches")
                        .HasForeignKey("SampleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleType");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Traceability", b =>
                {
                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.BatchIdentifier", "BatchIdentifier")
                        .WithMany("Traceabilities")
                        .HasForeignKey("BatchIdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BiologicalSamplesTraceability.Core.Entities.Checkpoint", "Checkpoint")
                        .WithMany("Traceabilities")
                        .HasForeignKey("CheckpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatchIdentifier");

                    b.Navigation("Checkpoint");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.BatchIdentifier", b =>
                {
                    b.Navigation("Traceabilities");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Checkpoint", b =>
                {
                    b.Navigation("Traceabilities");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.Route", b =>
                {
                    b.Navigation("RouteGroups");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.RouteType", b =>
                {
                    b.Navigation("Routes");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.SampleBatch", b =>
                {
                    b.Navigation("BatchIdentifier")
                        .IsRequired();

                    b.Navigation("RouteGroups");
                });

            modelBuilder.Entity("BiologicalSamplesTraceability.Core.Entities.SampleType", b =>
                {
                    b.Navigation("SampleBatches");
                });
#pragma warning restore 612, 618
        }
    }
}
